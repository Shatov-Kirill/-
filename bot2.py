import logging
import sqlite3
import os
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ –ø–∞–º—è—Ç–∏. –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.
active_chats = {}

# –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
banned_users = set()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    ADMIN_IDS = [1345438940, 792396771]  # ID –∞–¥–º–∏–Ω–æ–≤
    CHANNEL_ID = "-1002364019566"        # ID –∫–∞–Ω–∞–ª–∞
    CHANNEL_USERNAME = "nexus_infrek"
    DATABASE = "bot_db.sqlite"           # –ü—É—Ç—å –∫ –ë–î
    TOKEN = "7423580380:AAEchqJy_1Kn4O20V2nAGE2pjzW4c-O5qhw"
    ADMIN_CHAT_ID = "-4703103295"

def generate_channel_links (username: str):
    return{
        "mobile": f"https://t.me/{username}?embed=1",
        "web": f"https://web.telegram.org/k/#@{username}",
        'universal': f"https://t.me/{username}",
        'fallback': f"https://t.me/{username}"
    }

def adapt_datetime(dt):
    return dt.isoformat()

sqlite3.register_adapter(datetime, adapt_datetime)


CANCEL_KEYWORDS = ['–æ—Ç–º–µ–Ω–∞', '—Å—Ç–æ–ø']
def cancel_if_requested(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ callback'–∏)
        message = update.message

        #–ï—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not message or not message.text:
            return await func(update, context)
        
        text = update.message.text.strip().lower()  

        if text in CANCEL_KEYWORDS:  
            user = update.effective_user  
            context.user_data.clear()  
            print(f"[–û–¢–ú–ï–ù–ê] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ—Å—Å.")  
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")  
            return ConversationHandler.END  

        return await func(update, context)  
    return wrapper

def get_default_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("/start")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def log_sql(query, params=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.debug(f"SQL: {query} {f'with params {params}' if params else ''}")


# import sqlite3
# conn = sqlite3.connect("bot_db.sqlite")
# cursor = conn.cursor()
# cursor.execute("SELECT seller_id, user_id, platform_usercode FROM sellers")
# rows = cursor.fetchall()
# print("ID | USER_ID | PLATFORM_USERCODE")
# for row in rows:
#     print(row)
# conn.close()


# import sqlite3
# conn = sqlite3.connect("bot_db.sqlite")
# cursor = conn.cursor()
# cursor.execute("ALTER TABLE sellers ADD COLUMN platform_usercode TEXT;")
# conn.commit()
# conn.close()

# import sqlite3
# conn = sqlite3.connect("bot_db.sqlite")  # –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å!
# cursor = conn.cursor()
# cursor.execute("ALTER TABLE sellers ADD COLUMN reject_reason TEXT;")
# conn.commit()
# conn.close()
# print("–ü–æ–ª–µ reject_reason –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# import sqlite3
# conn = sqlite3.connect("bot_db.sqlite")
# cursor = conn.cursor()
# try:
#     cursor.execute("ALTER TABLE sellers ADD COLUMN nickname TEXT;")
# except sqlite3.OperationalError:
#     print("–ü–æ–ª–µ 'nickname' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# try:
#     cursor.execute("ALTER TABLE sellers ADD COLUMN platform_usercode TEXT;")
# except sqlite3.OperationalError:
#     print("–ü–æ–ª–µ 'platform_usercode' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
# conn.commit()
# conn.close()
# print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# import sqlite3
# conn = sqlite3.connect("bot_db.sqlite")
# cursor = conn.cursor()
# try:
#     cursor.execute("ALTER TABLE sellers ADD COLUMN deals INTEGER DEFAULT 0;")
# except sqlite3.OperationalError as e:
#     print("–ü–æ–ª–µ deals —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", e)
# try:
#     cursor.execute("ALTER TABLE sellers ADD COLUMN rating REAL;")
# except sqlite3.OperationalError as e:
#     print("–ü–æ–ª–µ rating —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", e)
# conn.commit()
# conn.close()
# print("–ì–æ—Ç–æ–≤–æ.")

# def upgrade_db():
#     try:
#         conn = sqlite3.connect(Config.DATABASE)
#         cursor = conn.cursor()

#         try:
#             cursor.execute("ALTER TABLE sellers ADD COLUMN deals INTEGER DEFAULT 0;")
#             print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'deals'.")
#         except sqlite3.OperationalError as e:
#             print(f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü 'deals' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")

#         try:
#             cursor.execute("ALTER TABLE sellers ADD COLUMN rating REAL DEFAULT 0;")
#             print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'rating'.")
#         except sqlite3.OperationalError as e:
#             print(f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü 'rating' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")

#         # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–¥–µ–ª–æ–∫
#         cursor.execute('''CREATE TABLE IF NOT EXISTS deals (
#             deal_id INTEGER PRIMARY KEY AUTOINCREMENT,
#             buyer_id INTEGER,
#             seller_id INTEGER,
#             status TEXT,
#             payment_type TEXT,
#             buyer_confirmed BOOLEAN DEFAULT 0,
#             seller_confirmed BOOLEAN DEFAULT 0,
#             rating INTEGER,
#             comment TEXT,
#             timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
#         );''')
#         print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'deals' —Å–æ–∑–¥–∞–Ω–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞).")

#         conn.commit()
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
#     finally:
#         conn.close()
# # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# upgrade_db()

# conn = sqlite3.connect("bot_db.sqlite")
# cursor = conn.cursor()
# # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É nickname, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
# cursor.execute("ALTER TABLE users ADD COLUMN nickname TEXT;")
# conn.commit()
# conn.close()
# print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ nickname –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É users.")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ---
(
    CHECK_SUBSCRIPTION, CHOOSE_ROLE,
    SELLER_PLATFORM, SELLER_AUDIENCE, SELLER_THEME, SELLER_VIEWS,
    SELLER_AD_TYPE, SELLER_SCREENSHOT, SELLER_CONFIRM,
    BUYER_PLATFORM, SELLER_NICKNAME, BUYER_CHOOSE_SELLER, BUYER_MESSAGE,
    REJECT_REASON, ADMIN_PANEL, SELLER_CUSTOM_AD_TYPE,
    SELLER_REPLY, DIALOG, SELLER_USERCODE, SHOW_SELLER_PROFILE,
    CHOOSE_BUYER_NICKNAME
) = range(21)
# –ó–¥–µ—Å—å –±—ã–ª REPLY_TO_BUYER –≤–º–µ—Å—Ç–æ SELLER_REPLY


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
KEYBOARDS = {
    'role': [
        [InlineKeyboardButton("–ü—Ä–æ–¥–∞–≤–µ—Ü", callback_data='seller')],
        [InlineKeyboardButton("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data='buyer')]
    ],
    'platform': [
        [InlineKeyboardButton("TikTok", callback_data='tiktok')],
        [InlineKeyboardButton("YouTube", callback_data='youtube')],
        [InlineKeyboardButton("Instagram", callback_data='instagram')],
        [InlineKeyboardButton("VK", callback_data='vk')],
        [InlineKeyboardButton("Twitch", callback_data='twitch')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_roles')]
    ],
    'ad_type': [
        [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º—É–∑—ã–∫–∏", callback_data='music')],
        [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –¢–ì–ö", callback_data='tgk')],
        [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='products')],
        [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–æ–∫", callback_data='platforms')],
        [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤", callback_data='brands')],
        [InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–µ", callback_data='custom_ad')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_views')]
    ],
    'confirm': [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_application')],
        [InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_application')]
    ]
}

#–ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.
dialog_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üí∞ –ù–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É"), KeyboardButton("üíº –≠–∫—Å—Ä–æ—É-—Å—á–µ—Ç")],
        [KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    try:
        conn = sqlite3.connect(Config.DATABASE, timeout=20)
        conn.execute("PRAGMA journal_mode=WAL")
        cursor = conn.cursor()
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                         (user_id INTEGER PRIMARY KEY,
                          username TEXT,
                          first_name TEXT,
                          last_name TEXT,
                          role TEXT,
                          reg_date TIMESTAMP)''')
                          
        cursor.execute('''CREATE TABLE IF NOT EXISTS sellers
                         (seller_id INTEGER PRIMARY KEY AUTOINCREMENT,
                          user_id INTEGER,
                          platform TEXT,
                          audience TEXT,
                          theme TEXT,
                          views TEXT,
                          ad_type TEXT,
                          screenshot_id TEXT,
                          status TEXT DEFAULT 'pending',
                          reject_reason TEXT,
                          FOREIGN KEY(user_id) REFERENCES users(user_id))''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS admin_logs
                          (log_id INTEGER PRIMARY KEY AUTOINCREMENT,
                          admin_id INTEGER,
                          action TEXT,
                          application_id INTEGER,
                          timestamp TIMESTAMP)''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute('''CREATE INDEX IF NOT EXISTS idx_sellers_platform ON sellers(platform)''')
        cursor.execute('''CREATE INDEX IF NOT EXISTS idx_sellers_status ON sellers(status)''')
        
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        conn.close() if 'conn' in locals() else None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ ---
async def ask_reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE, app_id: int, message_id: int = None):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∑–∞—è–≤–∫–∏"""
    context.user_data['reject_app_id'] = app_id
    context.user_data['reject_message_id'] = message_id

    try:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_reject_{app_id}")]
                ])
            )
        else:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_reject_{app_id}")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞: {e}")

async def save_user(user_id, username, first_name, last_name, role, nickname=None):
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        now = datetime.now().isoformat()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, role, reg_date, nickname)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, role, now, nickname))

        if nickname:
            cursor.execute("UPDATE users SET nickname=? WHERE user_id=?", (nickname, user_id))

        cursor.execute("UPDATE users SET role=? WHERE user_id=?", (role, user_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

async def save_seller_application(user_id, data):
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO sellers
                        (user_id, platform, audience, theme, views, ad_type, screenshot_id, status, nickname, platform_usercode)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (user_id, data['platform'], data['audience'], data['theme'], 
                        data['views'], data['ad_type'], data.get('screenshot', ''), 'pending', data['nickname'], data['platform_usercode']))
        conn.commit()
        return cursor.lastrowid
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
        return None
    finally:
        conn.close() if 'conn' in locals() else None

async def log_admin_action(admin_id, action, app_id):
    conn = None
    try:
        conn = sqlite3.connect(Config.DATABASE, timeout=10)
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO admin_logs 
                        (admin_id, action, application_id, timestamp)
                        VALUES (?, ?, ?, ?)''',
                     (admin_id, action, app_id, datetime.now()))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        if "locked" in str(e):
            await asyncio.sleep(0.1)
            return await log_admin_action(admin_id, action, app_id)
    finally:
        if conn:
            conn.close()

async def get_sellers_by_platform(platform, descending=True):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()

        order = "DESC" if descending else "ASC"

        cursor.execute(f'''
            SELECT user_id, nickname, audience, views 
            FROM sellers 
            WHERE platform=? AND status='approved'
            ORDER BY 
                CAST(REPLACE(REPLACE(REPLACE(LOWER(audience), '–∫', ''), 'k', ''), '+', '') AS INTEGER) {order}
        ''', (platform,))
        
        return cursor.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: {e}")
        return []
    finally:
        conn.close()

async def send_new_message(query, context, text, reply_markup=None, photo=None, document=None):
    if photo:
        await context.bot.send_photo(
            chat_id=query.from_user.id,
            photo=photo,
            caption=text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    elif document:
        await context.bot.send_document(
            chat_id=query.from_user.id,
            document=document,
            caption=text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    else:
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )

async def clear_my_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    conn = None
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM sellers WHERE user_id=?", (user_id,))
        conn.commit()
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã",
            reply_markup=get_default_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
    finally:
        if conn:
            conn.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò *–°–ø—Ä–∞–≤–∫–∞*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª–æ–≤ –∏ –∫–æ–º–∞–Ω–¥:\n\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å\n"
        "‚Ä¢ –æ—Ç–º–µ–Ω–∞, cancel, —Å—Ç–æ–ø ‚Äî —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–∏—à–µ—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é\n"
        "‚Ä¢ /profile ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
        "‚Ä¢ /help ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ï—Å–ª–∏ –≤—ã –∑–∞—Å—Ç—Ä—è–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start.",
        parse_mode="Markdown",
        reply_markup=get_default_keyboard()
    )

async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /block @username")
        return

    username = context.args[0].lstrip('@')
    user_id = await get_user_id_by_username(update, username)

    if user_id:
        banned_users.add(user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")

async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /unblock @username")
        return

    username = context.args[0].lstrip('@')
    user_id = await get_user_id_by_username(update, username)

    if user_id:
        banned_users.discard(user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")

async def is_admin(update: Update) -> bool:
    chat_member = await update.effective_chat.get_member(update.effective_user.id)
    return chat_member.status in ['administrator', 'creator']

async def get_user_id_by_username(update: Update, username: str):
    try:
        members = await update.effective_chat.get_administrators()
        for member in members:
            if member.user.username and member.user.username.lower() == username.lower():
                return member.user.id

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —á–∞—Ç–∞
        async for msg in update.effective_chat.get_history(limit=100):
            if msg.from_user.username and msg.from_user.username.lower() == username.lower():
                return msg.from_user.id
    except:
        return None

async def group_message_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in banned_users:
        return  # –ë–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–ª—å—à–µ...

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."""
    try:
        user = update.effective_user
        await save_user(user.id, user.username, user.first_name, user.last_name, 'unassigned')
        
        links = generate_channel_links(Config.CHANNEL_USERNAME)
        
        text = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n")
        
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì± –ú–æ–±–∏–ª—å–Ω–∞—è", url=links['mobile'])],
            [InlineKeyboardButton("üåê –í–µ–±-–≤–µ—Ä—Å–∏—è", url=links['web'])],
            [InlineKeyboardButton("üíª Desktop", url=links['universal'])],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await send_new_message(update.callback_query, context, text, markup)
            await context.bot.send_message(  # <--- –î–æ–±–∞–≤–ª–µ–Ω–æ
                chat_id=update.effective_user.id,
                text="–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é /start.",
                reply_markup=get_default_keyboard()
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            await update.message.reply_text(  # <--- –î–æ–±–∞–≤–ª–µ–Ω–æ
                "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_default_keyboard()
            )
        
        return CHECK_SUBSCRIPTION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='start')]
                    ])
                )
            elif update.message:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start",
                    reply_markup=get_default_keyboard()
                )
            else:
                # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
        except Exception as inner_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
        
        return ConversationHandler.END

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    query = update.callback_query
    await query.answer()
    
    try:
        user_id = query.from_user.id
        chat_member = await context.bot.get_chat_member(
            chat_id=Config.CHANNEL_ID,
            user_id=user_id
        )

        links = generate_channel_links(Config.CHANNEL_USERNAME)

        if chat_member.status in ['member', 'administrator', 'creator']:
            await query.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n\n"
                "‚ùó–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ /help\n\n"
                "–ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å?", 
                reply_markup=InlineKeyboardMarkup(KEYBOARDS['role'])
            )
            return CHOOSE_ROLE
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ
            # await start(update, context)
            await query.answer()
            await send_new_message(query, context, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.", InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì± –ú–æ–±–∏–ª—å–Ω–∞—è", url=links['mobile'])],
                    [InlineKeyboardButton("üåê –í–µ–±-–≤–µ—Ä—Å–∏—è", url=links['web'])],
                    [InlineKeyboardButton("üíª Desktop", url=links['universal'])],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
                ])
            )
            return CHECK_SUBSCRIPTION
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await send_new_message(query, context, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
        return ConversationHandler.END

async def save_buyer_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    nickname = update.message.text.strip()
    user = update.effective_user

    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET nickname = ? WHERE user_id = ?", (nickname, user.id))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º.")
        return CHOOSE_BUYER_NICKNAME

    await update.message.reply_text(f"‚úÖ –ù–∏–∫–Ω–µ–π–º *{nickname}* —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(KEYBOARDS['platform']))
    return BUYER_PLATFORM

async def buyer_nickname_keep(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    await query.message.reply_text("‚úÖ –•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=InlineKeyboardMarkup(KEYBOARDS['platform']))
    return BUYER_PLATFORM

async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    role = query.data
    user = query.from_user

    if role == "buyer":
        context.user_data["role"] = "buyer"
        try:
            conn = sqlite3.connect(Config.DATABASE)
            cursor = conn.cursor()
            cursor.execute("SELECT nickname FROM users WHERE user_id=?", (user.id,))
            result = cursor.fetchone()
            conn.close()

            if result and result[0]:  # –ù–∏–∫–Ω–µ–π–º —É–∂–µ –µ—Å—Ç—å
                await query.message.reply_text(
                    f"üë§ –í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: *{result[0]}*.\n\n"
                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π. –ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="keep_nickname")]
                    ])
                )
                return CHOOSE_BUYER_NICKNAME
            else:
                await query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–æ–¥–∞–≤—Ü—É:")
                return CHOOSE_BUYER_NICKNAME

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END

    elif role == "seller":
        await query.message.reply_text("üñ• –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=InlineKeyboardMarkup(KEYBOARDS['platform']))
        return SELLER_PLATFORM

@cancel_if_requested
async def seller_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–º."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back_to_roles':
        await send_new_message(query, context, "–ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å?", InlineKeyboardMarkup(KEYBOARDS['role']))
        return CHOOSE_ROLE
    
    platform = query.data
    if 'application_data' not in context.user_data:
        context.user_data['application_data'] = {}
        context.user_data['application_data']['platform'] = platform
    
    await send_new_message(query, context, f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (–æ–Ω –±—É–¥–µ—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤)")
    return SELLER_NICKNAME

@cancel_if_requested
async def seller_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    nickname = update.message.text.strip()
    context.user_data['application_data']['nickname'] = nickname

    await update.message.reply_text(f"–£–∫–∞–∂–∏—Ç–µ —é–∑-–∫–æ–¥ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel –∏–ª–∏ —Å—Å—ã–ª–∫–∞):")
    return SELLER_USERCODE

@cancel_if_requested
async def seller_usercode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    usercode = update.message.text.strip()
    context.user_data['application_data']['platform_usercode'] = usercode

    if not usercode:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —é–∑-–∫–æ–¥ - —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
        return SELLER_USERCODE

    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X–ö' –∏–ª–∏ 'XK' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10–ö, 50–ö, 100–ö+):")
    return SELLER_AUDIENCE

@cancel_if_requested
async def seller_audience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º."""
    text = update.message.text.strip().lower()

    if not (text.endswith('–∫') or text.endswith('k')):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X–ö'  –∏–ª–∏ 'XK' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10–ö, 50–ö, 100–ö+):")
        return SELLER_AUDIENCE
    
    context.user_data['application_data']['audience'] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    return SELLER_THEME

@cancel_if_requested
async def seller_theme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    if len(update.message.text) < 10:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        return SELLER_THEME
    
    context.user_data['application_data']['theme'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∞—à–∏—Ö –≤–∏–¥–µ–æ/—Ä–∏–ª—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X–ö' –∏–ª–∏ 'XK' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30–ö, 36–ö):")
    return SELLER_VIEWS

@cancel_if_requested
async def seller_views(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."""
    text = update.message.text.strip().lower()

    if not (text.endswith('–∫') or text.endswith('k')):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X–ö'  –∏–ª–∏ 'XK' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30–ö, 36–ö)")
        return SELLER_VIEWS

    context.user_data['application_data']['views'] = update.message.text
    await update.message.reply_text(
        "–ö–∞–∫—É—é —Ä–µ–∫–ª–∞–º—É –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?",
        reply_markup=InlineKeyboardMarkup(KEYBOARDS['ad_type']))
    return SELLER_AD_TYPE

@cancel_if_requested
async def seller_ad_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–∫–ª–∞–º—ã."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back_to_views':
        await send_new_message(query, context, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∞—à–∏—Ö –≤–∏–¥–µ–æ/—Ä–∏–ª—Å–æ–≤ (–≤ '–ö', –Ω–∞–ø—Ä–∏–º–µ—Ä: 30–ö, 36–ö):")
        return SELLER_VIEWS

    if query.data == 'custom_ad':
        await send_new_message(query, context, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, –∫–∞–∫—É—é —Ä–µ–∫–ª–∞–º—É –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å:")
        return SELLER_CUSTOM_AD_TYPE
    else:
        context.user_data['application_data']['ad_type'] = query.data
        await send_new_message(query, context, "–°–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π, —á—Ç–æ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞.")
        return SELLER_SCREENSHOT

@cancel_if_requested
async def seller_custom_ad_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    context.user_data['application_data']['ad_type'] = text
    await update.message.reply_text("–°–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π, —á—Ç–æ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞.")
    return SELLER_SCREENSHOT

@cancel_if_requested
async def seller_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    if update.message.photo:
        context.user_data['application_data']['screenshot'] = update.message.photo[-1].file_id
    elif update.message.document and update.message.document.mime_type.startswith('image/'):
        context.user_data['application_data']['screenshot'] = update.message.document.file_id
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=get_default_keyboard())
        return SELLER_SCREENSHOT
    
    data = context.user_data['application_data']
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data['platform']}\n"
        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['audience']}\n"
        f"–¢–µ–º–∞—Ç–∏–∫–∞: {data['theme']}\n"
        f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {data['views']}\n"
        f"–¢–∏–ø —Ä–µ–∫–ª–∞–º—ã: {data['ad_type']}"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(KEYBOARDS['confirm']))
    return SELLER_CONFIRM

async def seller_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'confirm_application':
        user = query.from_user
        data = context.user_data['application_data']
        
        app_id = await save_seller_application(user.id, data)
        
        if app_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–∫–∞–∫ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            application_text = (
                "üìÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞* #" + str(app_id) + "\n\n"
                f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user.username} ([{user.first_name}](tg://user?id={user.id}))\n"
                f"üë§ *–Æ–∑-–∫–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–∞:* {data['platform_usercode']}\n"
                f"üñ• *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {data['platform']}\n"
                f"üë• *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {data['audience']}\n"
                f"üìå *–¢–µ–º–∞—Ç–∏–∫–∞:* {data['theme']}\n"
                f"üëÄ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {data['views']}\n"
                f"üì¢ *–¢–∏–ø —Ä–µ–∫–ª–∞–º—ã:* {data['ad_type']}\n\n"
                "*–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*"
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            admin_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∑–∞—è–≤–∫—É
            for admin_id in Config.ADMIN_IDS:
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=application_text,
                        parse_mode='Markdown'
                    )
                    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await context.bot.send_photo(
                        chat_id=admin_id,
                        photo=data['screenshot'],
                        reply_markup=admin_keyboard
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_new_message(query, context, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ—à–µ–Ω–∏–∏.")
        else:
            await send_new_message(query, context, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='start')]
                ])
            )
        
        return ConversationHandler.END
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ò–∑–º–µ–Ω–∏—Ç—å"
        await send_new_message(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", InlineKeyboardMarkup(KEYBOARDS['platform']))
        return SELLER_PLATFORM

async def reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        print("‚ùå reject_reason: –ù–ï–¢ update.message")
        return ConversationHandler.END

    print("‚úÖ reject_reason –°–†–ê–ë–û–¢–ê–õ")

    text = update.message.text
    print(f"–ü–æ–π–º–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–∞: {text}")

    reason = text
    app_id = context.user_data.get('reject_app_id')

    if not app_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –ë–î
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE sellers SET status='rejected', reject_reason=? WHERE seller_id=?",
            (reason, app_id)
        )
        cursor.execute("SELECT user_id FROM sellers WHERE seller_id=?", (app_id,))
        result = cursor.fetchone()
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã: {e}")
        await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                reply_markup=get_default_keyboard()
            )
        return ConversationHandler.END
    finally:
        conn.close()

    if not result:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

    user_id = result[0]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
    await context.bot.send_message(
        chat_id=user_id,
        text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n\n{reason}\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ /start."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")

    return ConversationHandler.END

async def cancel_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    _, _, app_id = query.data.split('_')
    try:
        await send_new_message(query, context, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id} –æ—Ç–º–µ–Ω–µ–Ω–æ", InlineKeyboardMarkup([
                [InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
            ])
        )
    except:
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id} –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
            ])
        )
    return ConversationHandler.END

async def buyer_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    # print("–Ω–∞–∑–∞–¥ —Å—Ä–∞–±–æ—Ç–∞–ª!")
    if query.data == 'back_to_roles':
        await send_new_message(query, context, "–ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å?", InlineKeyboardMarkup(KEYBOARDS['role']))
        return CHOOSE_ROLE

    platform = query.data
    context.user_data['selected_platform'] = platform
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    context.user_data['sort_descending'] = True

    return await show_sorted_sellers(update, context)

async def show_sorted_sellers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    platform = context.user_data.get('selected_platform')
    descending = context.user_data.get('sort_descending', True)

    sellers = await get_sellers_by_platform(platform, descending)

    query = update.callback_query
    await query.answer()

    platform = context.user_data.get('selected_platform')
    descending = context.user_data.get('sort_descending')

    sellers = await get_sellers_by_platform(platform, descending)

    if not sellers:
        await send_new_message(query, context, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.", InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_roles')]])
        )
        return BUYER_PLATFORM

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    seller_list = "\n".join(
        f"{idx+1}. {seller[1]} | –ê—É–¥–∏—Ç–æ—Ä–∏—è: {seller[2]} | –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {seller[3]}"
        for idx, seller in enumerate(sellers)
    )
    context.user_data['sellers'] = sellers

    sort_button = InlineKeyboardButton(
        "üîΩ –£–±—ã–≤–∞–Ω–∏–µ" if descending else "üîº –í–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ",
        callback_data="toggle_sort"
    )

    await send_new_message(query, context, f"üîç –ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–∞ {platform}:\n\n{seller_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞:", InlineKeyboardMarkup([
            [sort_button],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_roles')]
        ])
    )

    return SHOW_SELLER_PROFILE

async def toggle_sort(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    context.user_data['sort_descending'] = not context.user_data.get('sort_descending', True)

    print("Sort bit:", context.user_data['sort_descending'])  # –û—Ç–ª–∞–¥–∫–∞

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    return await show_sorted_sellers(update, context)

async def show_seller_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = int(update.message.text.strip()) - 1
    sellers = context.user_data.get('sellers', [])

    if idx < 0 or idx >= len(sellers):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞.")
        return BUYER_CHOOSE_SELLER

    seller = sellers[idx]
    context.user_data['selected_seller'] = seller

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()
    cursor.execute('''SELECT nickname, platform_usercode, audience, views, ad_type, deals, rating
                      FROM sellers WHERE user_id=? ORDER BY seller_id DESC LIMIT 1''', (seller[0],))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return BUYER_PLATFORM

    nickname, usercode, audience, views, ad_type, deals, rating = row

    profile_text = (
        f"üë§ *{nickname}*\n"
        f"üìé –Æ–∑-–∫–æ–¥: {usercode}\n"
        f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
        f"üì¢ –†–µ–∫–ª–∞–º–∞: {ad_type}\n"
        f"ü§ù –°–¥–µ–ª–æ–∫: {deals or 0}\n"
        f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: {rating or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )

    seller_user_id = seller[0]

    await update.message.reply_text(profile_text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data="start_dialog")],
        [InlineKeyboardButton("‚óÄÔ∏è –î—Ä—É–≥–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—ã", callback_data="back_to_platforms")],
        [InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f"view_comments_{seller_user_id}")]
    ]))
    return ConversationHandler.END

@cancel_if_requested
async def start_dialog_from_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    seller = context.user_data.get('selected_seller')
    if not seller:
        await query.message.reply_text("‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É. –û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –µ–º—É –≤ –±–æ—Ç.")
    return BUYER_MESSAGE

@cancel_if_requested
async def back_to_sellers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    sellers = context.user_data.get('sellers', [])
    platform = context.user_data.get('platform', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    if not sellers:
        await query.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return ConversationHandler.END

    seller_list = "\n".join(
        f"{idx+1}. {seller[1]} | –ê—É–¥–∏—Ç–æ—Ä–∏—è: {seller[2]} | –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {seller[3]}"
        for idx, seller in enumerate(sellers)
    )

    await query.message.reply_text(
        f"üîç –ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–∞ {platform}:\n\n{seller_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å:"
    )
    return BUYER_CHOOSE_SELLER

@cancel_if_requested
async def buyer_choose_seller(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."""
    try:
        seller_num = int(update.message.text) - 1
        sellers = context.user_data['sellers']
        
        if seller_num < 0 or seller_num >= len(sellers):
            raise ValueError
            
        selected_seller = sellers[seller_num]
        context.user_data['selected_seller'] = selected_seller

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: {selected_seller[1]}\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞:")
        return BUYER_MESSAGE
    except ValueError:
        await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=get_default_keyboard()    
            )
        return BUYER_CHOOSE_SELLER

# @cancel_if_requested
# async def buyer_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞."""
#     message = update.message.text
#     user = update.message.from_user
#     seller = context.user_data['selected_seller']
#     receiver_id = seller[0]
#     sender_id = user.id
#     text = message
#     buyer_id = update.effective_user.id

#     active_chats[update.effective_user.id] = seller[0]
#     active_chats[seller[0]] = update.effective_user.id

#     sender_user = await context.bot.get_chat(sender_id)
#     receiver_user = await context.bot.get_chat(receiver_id)

#     conn = sqlite3.connect(Config.DATABASE)
#     cursor = conn.cursor()
#     # –ü–æ–ª—É—á–∞–µ–º nickname –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ users
#     cursor.execute("SELECT nickname FROM users WHERE user_id=?", (buyer_id,))
#     row = cursor.fetchone()
#     buyer_nickname = row[0] if row and row[0] else f"id:{buyer_id}"
#     conn.close()

#     await context.bot.send_message(
#         chat_id=seller[0],
#         text=f"üí¨ –í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º: {buyer_nickname}"
#     )

#     if not buyer_id:
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#         return ConversationHandler.END

#     # –ü–æ–ª—É—á–∞–µ–º nickname –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ –ë–î
#     try:
#         conn = sqlite3.connect(Config.DATABASE)
#         cursor = conn.cursor()
#         cursor.execute("SELECT nickname FROM sellers WHERE user_id=? ORDER BY seller_id DESC LIMIT 1", (seller[0],))
#         row = cursor.fetchone()
#         seller_nickname = row[0] if row and row[0] else f"id:{seller[0]}"
#         conn.close()
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ nickname –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
#         seller_nickname = f"@{seller[1]}"

#     await context.bot.send_message(
#         chat_id=user.id,
#         text="–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
#         reply_markup=dialog_keyboard
#     )

#     await context.bot.send_message(
#         chat_id=seller[0],
#         text="–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
#         reply_markup=dialog_keyboard
#     )

#     logger.info(f"‚û°Ô∏è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' –ø—Ä–æ–¥–∞–≤—Ü—É: reply_to_{user.id}")

#     # –¢–µ–ø–µ—Ä—å –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –±–æ—Ç–µ
#     await context.bot.send_message(
#         chat_id=seller[0],  # ID –ø—Ä–æ–¥–∞–≤—Ü–∞
#         text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{buyer_nickname}:\n\n{message}\n\n"
#              f"–û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å",
#         reply_markup=InlineKeyboardMarkup([
#             [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user.id}")]
#         ])
#     )

#     # –ø–æ–ª—É—á–∞–µ–º User-–æ–±—ä–µ–∫—Ç—ã
#     sender_user   = await context.bot.get_chat(sender_id)
#     receiver_user = await context.bot.get_chat(receiver_id)

#     # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
#     sender_name   = f"@{sender_user.username}" if sender_user.username else sender_user.full_name
#     receiver_name = f"@{receiver_user.username}" if receiver_user.username else receiver_user.full_name

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
#     await context.bot.send_message(
#         chat_id=Config.ADMIN_CHAT_ID,
#         text=(
#             f"üü† [–î–∏–∞–ª–æ–≥] –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ‚û°Ô∏è –ü—Ä–æ–¥–∞–≤—Ü—É\n"
#             f"–û—Ç {sender_name} ‚û°Ô∏è {receiver_name}:\n\n{text}"
#         )    
#     )

#     await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.")
    
#     return DIALOG

# @cancel_if_requested
# async def seller_reply_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     query = update.callback_query
#     await query.answer()

#     try:
#         buyer_id = int(query.data.split('_')[2])
#         seller_id = query.from_user.id

#         active_chats[seller_id] = buyer_id
#         active_chats[buyer_id] = seller_id

#         context.user_data['reply_to'] = buyer_id

#         logger.info(f"üì• –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û—Ç–≤–µ—Ç–∏—Ç—å': data = {query.data}, –æ—Ç = {query.from_user.id}")
#         logger.info(f"üí¨ seller_reply_start: reply_to set to {buyer_id} for user {query.from_user.id}")

#         await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:")
#         return REPLY_TO_BUYER

#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ seller_reply_start: {e}")
#         await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return ConversationHandler.END

# @cancel_if_requested
# async def seller_send_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     logger.info("üëå seller_send_reply –≤—ã–∑–≤–∞–Ω")

#     seller = update.effective_user
#     sender_id = seller.id
#     buyer_id = context.user_data.get('reply_to')
#     text = update.message.text.strip()

#     logger.info(f"seller_send_reply called by user {sender_id}, reply_to = {buyer_id}")

#     logger.info(f"‚úÖ seller_send_reply –≤—ã–∑–≤–∞–Ω –æ—Ç {update.effective_user.id}")
#     reply_to_user_id = context.user_data.get("reply_to")
#     logger.info(f"üì§ reply_to_user_id = {reply_to_user_id}")

#     if not buyer_id:
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∞.")
#         return ConversationHandler.END

#     # –ü–æ–ª—É—á–∞–µ–º nickname –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
#     try:
#         conn = sqlite3.connect(Config.DATABASE)
#         cursor = conn.cursor()
#         cursor.execute("SELECT nickname FROM users WHERE user_id=?", (buyer_id,))
#         row = cursor.fetchone()
#         buyer_nickname = row[0] if row and row[0] else f"id:{buyer_id}"
#         conn.close()
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ nickname –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {e}")
#         buyer_nickname = f"id:{buyer_id}"

#     try:
#         sender_user = await context.bot.get_chat(sender_id)
#         receiver_user = await context.bot.get_chat(buyer_id)

#         sender_name = f"@{sender_user.username}" if sender_user.username else sender_user.full_name
#         receiver_name = f"@{receiver_user.username}" if receiver_user.username else receiver_user.full_name

#         logger.info(f"seller {update.effective_user.id} is replying to buyer {buyer_id}")

#         await context.bot.send_message(
#             chat_id=buyer_id,
#             text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ {sender_name}:\n\n{text}",
#             reply_markup=dialog_keyboard
#         )

#         await context.bot.send_message(
#             chat_id=Config.ADMIN_CHAT_ID,
#             text=(
#                 f"üü† [–î–∏–∞–ª–æ–≥] –ü—Ä–æ–¥–∞–≤–µ—Ü ‚û°Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—é\n"
#                 f"–û—Ç {sender_name} ‚û°Ô∏è {receiver_name}:\n\n{text}"
#             )
#         )

#         await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
#         logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}, buyer_id={buyer_id}, text={text}")
#         await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return ConversationHandler.END

#     return DIALOG

#________________________________________________________________________________ 

async def get_user_role(user_id: int) -> str:
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()

    cursor.execute("SELECT 1 FROM sellers WHERE user_id=?", (user_id,))
    if cursor.fetchone():
        conn.close()
        return "seller"

    cursor.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,))
    if cursor.fetchone():
        conn.close()
        return "buyer"

    conn.close()
    return "unknown"

async def get_seller_nickname(user_id: int) -> str:
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT nickname FROM sellers WHERE user_id = ? ORDER BY seller_id DESC LIMIT 1", (user_id,))
        row = cursor.fetchone()
        conn.close()
        return row[0] if row and row[0] else f"id:{user_id}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
        return f"id:{user_id}"

async def get_buyer_nickname(user_id: int) -> str:
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT nickname FROM users WHERE user_id = ? LIMIT 1", (user_id,))
        row = cursor.fetchone()
        conn.close()
        return row[0] if row and row[0] else f"id:{user_id}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {e}")
        return f"id:{user_id}"

@cancel_if_requested
async def buyer_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–æ–¥–∞–≤—Ü—É."""
    message = update.message.text
    sender_id = update.effective_user.id
    receiver_id = context.user_data.get('selected_seller')
    if isinstance(receiver_id, tuple):
        receiver_id = receiver_id[0]

    if not receiver_id:
        await update.message.reply_text("‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return ConversationHandler.END

    # üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
    active_chats[sender_id] = receiver_id
    active_chats[receiver_id] = sender_id

    # üß† –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü, –∞ –∫—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
    sender_role = await get_user_role(sender_id)
    receiver_role = await get_user_role(receiver_id)

    if sender_role == "seller":
        seller_id = sender_id
        buyer_id = receiver_id
    else:
        seller_id = receiver_id
        buyer_id = sender_id

    context.user_data["selected_seller"] = seller_id
    context.user_data["reply_to"] = buyer_id

    # üîé –ü–æ–ª—É—á–∞–µ–º nickname –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT nickname FROM users WHERE user_id=?", (buyer_id,))
    row = cursor.fetchone()
    buyer_nickname = row[0] if row and row[0] else f"id:{buyer_id}"
    conn.close()

    # üì® –ü—Ä–æ–¥–∞–≤—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=seller_id,
        text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer_nickname}:\n\n{message}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{buyer_id}")]
        ])
    )

    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.")

    # –ê–¥–º–∏–Ω—É
    sender_user = await context.bot.get_chat(sender_id)
    receiver_user = await context.bot.get_chat(receiver_id)
    sender_name = f"@{sender_user.username}" if sender_user.username else sender_user.full_name
    receiver_name = f"@{receiver_user.username}" if receiver_user.username else receiver_user.full_name

    await context.bot.send_message(
        chat_id=Config.ADMIN_CHAT_ID,
        text=f"üü† [–î–∏–∞–ª–æ–≥] {sender_name} ‚û°Ô∏è {receiver_name}:\n\n{message}"
    )

    return DIALOG

@cancel_if_requested
async def seller_reply_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    try:
        buyer_id = int(query.data.split('_')[2])
        context.user_data['reply_to'] = buyer_id

        logger.info(f"üì• –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û—Ç–≤–µ—Ç–∏—Ç—å': data = {query.data}, –æ—Ç = {query.from_user.id}")
        logger.info(f"üí¨ reply_to —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ {buyer_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")

        await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:")
        return SELLER_REPLY

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ seller_reply_start: {e}")
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

@cancel_if_requested
async def seller_send_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    seller_id = update.effective_user.id
    buyer_id = context.user_data.get('reply_to')
    text = update.message.text.strip()

    logger.info(f"‚úâÔ∏è seller_send_reply –≤—ã–∑–≤–∞–Ω –æ—Ç {seller_id}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å = {buyer_id}")

    if not buyer_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º—ã
    seller_name = await get_seller_nickname(seller_id)
    buyer_name = await get_buyer_nickname(buyer_id)

    sender_user = await context.bot.get_chat(seller_id)
    receiver_user = await context.bot.get_chat(buyer_id)
    sender_display = f"@{sender_user.username}" if sender_user.username else sender_user.full_name
    receiver_display = f"@{receiver_user.username}" if receiver_user.username else receiver_user.full_name

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=buyer_id,
            text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_name}:\n\n{text}",
            reply_markup=dialog_keyboard
        )

        # –õ–æ–≥ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=Config.ADMIN_CHAT_ID,
            text=f"üü† [–î–∏–∞–ª–æ–≥] –ü—Ä–æ–¥–∞–≤–µ—Ü ‚û°Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—é\n–û—Ç {sender_display} ‚û°Ô∏è {receiver_display}:\n\n{text}"
        )

        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return DIALOG

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return ConversationHandler.END

@cancel_if_requested
async def dialog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    sender_id = update.effective_user.id
    receiver_id = active_chats.get(sender_id)
    text = update.message.text.strip()

    if not receiver_id:
        await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return ConversationHandler.END

    # üß† –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    role = await get_user_role(sender_id)

    if role == "seller":
        nickname = await get_seller_nickname(sender_id)
    elif role == "buyer":
        nickname = await get_buyer_nickname(sender_id)
    else:
        nickname = f"id:{sender_id}"

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞
    sender_user = await context.bot.get_chat(sender_id)
    receiver_user = await context.bot.get_chat(receiver_id)
    sender_name = f"@{sender_user.username}" if sender_user.username else sender_user.full_name
    receiver_name = f"@{receiver_user.username}" if receiver_user.username else receiver_user.full_name

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    await context.bot.send_message(
        chat_id=receiver_id,
        text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {nickname}:\n\n{text}",
        reply_markup=dialog_keyboard
    )

    # –õ–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=Config.ADMIN_CHAT_ID,
        text=(
            f"üü† [–î–∏–∞–ª–æ–≥]\n"
            f"–û—Ç {sender_name} ‚û°Ô∏è {receiver_name}:\n\n{text}"
        )
    )

    # ‚úÖ –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –∫–Ω–æ–ø–∫–∞ —Å–¥–µ–ª–∫–∏
    if text.lower() == "üí∞ –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É":
        payment_type = "direct"
    elif text.lower() == "üíº —ç–∫—Å—Ä–æ—É-—Å—á–µ—Ç":
        payment_type = "escrow"
    else:
        return DIALOG

    # üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    deal_id = await create_new_deal(sender_id, receiver_id, payment_type)
    context.user_data["active_deal_id"] = deal_id

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü/–ø–æ–∫—É–ø–∞—Ç–µ–ª—å
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM sellers WHERE user_id = ?", (sender_id,))
    is_sender_seller = cursor.fetchone()
    conn.close()

    seller_id = sender_id if is_sender_seller else receiver_id
    buyer_id = receiver_id if is_sender_seller else sender_id

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
    await context.bot.send_message(
        chat_id=receiver_id,
        text=f"{'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' if sender_id == buyer_id else '–ü—Ä–æ–¥–∞–≤–µ—Ü'} —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É #{deal_id} —á–µ—Ä–µ–∑ {payment_type.upper()}.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_deal_{deal_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"cancel_deal_{deal_id}")]
        ])
    )

    return DIALOG

#________________________________________________________________________________

# @cancel_if_requested
# async def dialog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     logger.info(f"üü¢ dialog_handler —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {update.effective_user.id} | text = {update.message.text}")
    
#     sender_id = update.effective_user.id
#     receiver_id = active_chats.get(sender_id)
#     text = update.message.text.strip().lower()

#     if not receiver_id:
#         await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
#         return ConversationHandler.END

#     # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
#     # seller_id, buyer_id = get_seller_and_buyer_ids(sender_id, receiver_id)
    
#     seller = context.user_data.get('selected_seller')
#     if not seller:
#         await update.message.reply_text("–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
#         return ConversationHandler.END

#     if not context.user_data.get('deal_intro_sent'):
#         await send_deal_intro(seller[0], context)
#         await send_deal_intro(update.effective_user.id, context)
#         context.user_data['deal_intro_sent'] = True

#     # –ø–æ–ª—É—á–∞–µ–º User-–æ–±—ä–µ–∫—Ç—ã
#     sender_user   = await context.bot.get_chat(sender_id)
#     receiver_user = await context.bot.get_chat(receiver_id)

#     # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
#     sender_name   = f"@{sender_user.username}" if sender_user.username else sender_user.full_name
#     receiver_name = f"@{receiver_user.username}" if receiver_user.username else receiver_user.full_name

#     # –ù–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞
#     nickname = await get_seller_nickname(sender_id)

#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
#     await context.bot.send_message(
#         chat_id=receiver_id,
#         text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {nickname}:\n\n{text}",
#         reply_markup=dialog_keyboard
#     )

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
#     await context.bot.send_message(
#         chat_id=Config.ADMIN_CHAT_ID,
#         text=(
#             f"üü† [–î–∏–∞–ª–æ–≥]\n"
#             f"–û—Ç {sender_name} ‚û°Ô∏è {receiver_name}:\n\n{text}"
#         )    
#     )

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫
#     if text.strip().lower() == "üí∞ –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É":
#         payment_type = "direct"
#     elif text.strip().lower() == "üíº —ç–∫—Å—Ä–æ—É-—Å—á–µ—Ç":
#         payment_type = "escrow"
#     else:
#         return DIALOG  # –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

#     # –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
#     deal_id = await create_new_deal(sender_id, receiver_id, payment_type)
#     context.user_data["active_deal_id"] = deal_id

#     conn = sqlite3.connect(Config.DATABASE)
#     cursor = conn.cursor()
#     cursor.execute("SELECT 1 FROM sellers WHERE user_id = ?", (sender_id,))
#     is_sender_seller = cursor.fetchone()
#     conn.close()

#     if is_sender_seller:
#         seller_id = sender_id
#         buyer_id = receiver_id
#     else:
#         seller_id = receiver_id
#         buyer_id = sender_id

#     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
#     await context.bot.send_message(
#         chat_id=receiver_id,
#         text=f"{'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' if sender_id == buyer_id else '–ü—Ä–æ–¥–∞–≤–µ—Ü'} —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É #{deal_id} —á–µ—Ä–µ–∑ {payment_type.upper()}.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ?",
#         reply_markup=InlineKeyboardMarkup([
#             [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_deal_{deal_id}")],
#             [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"cancel_deal_{deal_id}")]
#         ])
#     )

#     return DIALOG

async def confirm_deal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    print("üîî confirm_deal triggered")

    deal_id = int(query.data.split("_")[-1])
    
    # –¢—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ –≤ –ë–î
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()
    cursor.execute("UPDATE deals SET status = 'confirmed' WHERE deal_id = ?", (deal_id,))
    conn.commit()
    conn.close()

    await query.edit_message_text(f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

async def cancel_deal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    print("üîî cancel_deal triggered")

    deal_id = int(query.data.split("_")[-1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()
    cursor.execute("UPDATE deals SET status = 'cancelled' WHERE deal_id = ?", (deal_id,))
    conn.commit()
    conn.close()

    await query.edit_message_text(f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    companion = active_chats.pop(uid, None)

    if companion:
        active_chats.pop(companion, None)
        await context.bot.send_message(companion, "üîï –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=get_default_keyboard())

    await update.message.reply_text(
        "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END

async def send_deal_intro(receiver_id: int, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üì¶ *–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å–¥–µ–ª–∫–∏.*\n\n"
        "üí¨ –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏.\n\n"
        "üí∞ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫:\n"
        "‚Ä¢ –ù–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É ‚Äî –æ–ø–ª–∞—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n"
        "‚Ä¢ –≠–∫—Å—Ä–æ—É-—Å—á–µ—Ç ‚Äî –¥–µ–Ω—å–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±–æ—Ç–æ–º.\n\n"
        "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n"
        "–ù–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É ‚Äî –±–æ—Ç –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞. –û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º.\n"
        "–≠–∫—Å—Ä–æ—É-—Å—á–µ—Ç ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±. –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        "üîò –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É *¬´‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª* –¥–ª—è –≤—ã—Ö–æ–¥–∞\n"
        "‚Ä¢ –ù–∞–∂–∞—Ç—å *¬´–ù–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º¬ª* –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ\n"
        "‚Ä¢ –ù–∞–∂–∞—Ç—å *¬´–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞¬ª* –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    )

    await context.bot.send_message(
        chat_id=receiver_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")],
                [KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º")],
                [KeyboardButton("–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞")]
            ],
            resize_keyboard=True
        )
    )

async def create_new_deal(buyer_id, seller_id, payment_type):
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO deals (buyer_id, seller_id, status, payment_type) VALUES (?, ?, 'negotiation', ?)",
        (buyer_id, seller_id, payment_type)
    )
    conn.commit()
    deal_id = cursor.lastrowid
    conn.close()
    return deal_id

async def finish_deal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    deal_id = context.user_data.get('active_deal_id')
    if not deal_id:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏.")
        return ConversationHandler.END

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
    await update.message.reply_text("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–¥–∞–≤—Ü—É –æ—Ç 1 –¥–æ 5:")
    context.user_data['awaiting_rating'] = deal_id
    return WAITING_FOR_RATING

async def receive_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rating = int(update.message.text.strip())
    deal_id = context.user_data.pop('awaiting_rating')
    context.user_data['awaiting_comment'] = (deal_id, rating)

    await update.message.reply_text("–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ:")
    return WAITING_FOR_COMMENT

async def view_comments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    seller_id = int(update.callback_query.data.split('_')[2])
    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT comment, rating FROM deals WHERE seller_id=? AND comment IS NOT NULL", (seller_id,))
    reviews = cursor.fetchall()
    conn.close()

    if not reviews:
        await update.callback_query.message.reply_text("üîπ –ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.")
    else:
        text = "\n\n".join([f"‚≠êÔ∏è {r[1]}: {r[0]}" for r in reviews])
        await update.callback_query.message.reply_text(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:\n\n{text}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫."""
    if update.effective_user.id not in Config.ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()
        cursor.execute('''SELECT s.seller_id, u.username, s.platform, s.audience, 
                         s.theme, s.views, s.ad_type, s.status 
                         FROM sellers s JOIN users u ON s.user_id = u.user_id 
                         WHERE s.status='pending' ''')
        applications = cursor.fetchall()
        
        if not applications:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            return
        
        for app in applications:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app[0]}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app[0]}")]
            ])
            
            await update.message.reply_text(
                f"üìÑ –ó–∞—è–≤–∫–∞ #{app[0]}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{app[1]}\n"
                f"üñ• –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {app[2]}\n"
                f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {app[3]}\n"
                f"üìå –¢–µ–º–∞—Ç–∏–∫–∞: {app[4]}\n"
                f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {app[5]}\n"
                f"üì¢ –¢–∏–ø —Ä–µ–∫–ª–∞–º—ã: {app[6]}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {app[7]}",
                reply_markup=keyboard
            )
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")
    finally:
        conn.close() if 'conn' in locals() else None

async def admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id not in Config.ADMIN_IDS:
        return

    # try:
    parts = query.data.split('_')
    if len(parts) != 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")

    action, app_id_str = parts
    app_id = int(app_id_str)

    conn = sqlite3.connect(Config.DATABASE)
    cursor = conn.cursor()

    if action == 'approve':
        # –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        cursor.execute("UPDATE sellers SET status='approved' WHERE seller_id=?", (app_id,))
        cursor.execute("SELECT user_id FROM sellers WHERE seller_id=?", (app_id,))
        result = cursor.fetchone()
        if not result:
            await send_new_message(query, context, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return ConversationHandler.END

        user_id = result[0]
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=user_id,
            text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await send_new_message(query, context, f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞")

    elif action == 'reject':
        # –ó–¥–µ—Å—å –Ω–æ–≤—ã–π –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–∑–æ–≤
        await ask_reject_reason(update, context, app_id=app_id, message_id=query.message.message_id)
        # –í—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        context.user_data['state'] = REJECT_REASON
        return REJECT_REASON  # <-- –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å REJECT_REASON, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, —á—Ç–æ –∂–¥–µ—Ç —Ç–µ–∫—Å—Ç!


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = sqlite3.connect(Config.DATABASE)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
        cursor.execute('''SELECT role FROM users WHERE user_id=?''', (update.effective_user.id,))
        role = cursor.fetchone()

        text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n–†–æ–ª—å: {role[0] if role else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"

        # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü ‚Äî –¥–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ —é–∑-–∫–æ–¥
        if role and role[0] == 'seller':
            cursor.execute('''SELECT status, platform_usercode, platform 
                              FROM sellers 
                              WHERE user_id=? 
                              ORDER BY seller_id DESC 
                              LIMIT 1''', (update.effective_user.id,))
            row = cursor.fetchone()

            if row:
                status, usercode, platform = row
                text += f"\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status}"
                if usercode:
                    # –ê–≤—Ç–æ—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —ç—Ç–æ username
                    if usercode.startswith('@'):
                        text += f"\n–ê–∫–∫–∞—É–Ω—Ç: [—Å—Å—ã–ª–∫–∞](https://t.me/{usercode[1:]})"
                    elif usercode.startswith('http'):
                        text += f"\n–ê–∫–∫–∞—É–Ω—Ç: [–ø–µ—Ä–µ–π—Ç–∏]({usercode})"
                    else:
                        text += f"\n–ê–∫–∫–∞—É–Ω—Ç: {usercode}"
            else:
                text += "\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"

        await update.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=True)

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    finally:
        conn.close() if 'conn' in locals() else None

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text(
        "üóë –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_default_keyboard())
    return ConversationHandler.END

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    application = Application.builder().token(Config.TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler('start', start),
        CallbackQueryHandler(admin_action, pattern=r'^(approve|reject)_\d+$'),
        CallbackQueryHandler(start_dialog_from_profile, pattern="^start_dialog$"),
        CallbackQueryHandler(buyer_platform, pattern="^back_to_platforms$")
    ],
    states={
        CHECK_SUBSCRIPTION: [
            CallbackQueryHandler(check_subscription, pattern='^check_subscription$'),
            CallbackQueryHandler(start, pattern='^start$')
        ],
        CHOOSE_ROLE: [
            CallbackQueryHandler(choose_role, pattern='^(seller|buyer|back_to_start)$')
        ],
        SELLER_PLATFORM: [
            CallbackQueryHandler(seller_platform, pattern='^(tiktok|youtube|instagram|vk|twitch|back_to_roles)$')
        ],
        SELLER_AUDIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, seller_audience)],
        SELLER_THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, seller_theme)],
        SELLER_VIEWS: [MessageHandler(filters.TEXT & ~filters.COMMAND, seller_views)],
        SELLER_AD_TYPE: [CallbackQueryHandler(seller_ad_type)],
        SELLER_SCREENSHOT: [MessageHandler(filters.PHOTO | filters.Document.IMAGE | filters.TEXT, seller_screenshot)],
        SELLER_CONFIRM: [CallbackQueryHandler(seller_confirm, pattern='^(confirm|edit)_application$')],
        SELLER_USERCODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, seller_usercode)],
        SELLER_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, seller_nickname)],

        BUYER_PLATFORM: [
            CallbackQueryHandler(buyer_platform, pattern='^(tiktok|youtube|instagram|vk|twitch|another_platform|back_to_roles)$')
        ],
        BUYER_CHOOSE_SELLER: [MessageHandler(filters.TEXT & ~filters.COMMAND, buyer_choose_seller)],
        BUYER_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, buyer_message)],
        CHOOSE_BUYER_NICKNAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, save_buyer_nickname),
            CallbackQueryHandler(buyer_nickname_keep, pattern="^keep_nickname")
        ],

        REJECT_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, reject_reason)],
        SELLER_CUSTOM_AD_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, seller_custom_ad_type)],
        
        SELLER_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, seller_send_reply)],
        DIALOG: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, dialog_handler),
            MessageHandler(filters.TEXT & filters.Regex("^(‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥)$"), end_chat)
        ],

        # # üîÑ –û—Ç–≤–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
        # REPLY_TO_BUYER: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, seller_send_reply)
        # ],

        # # üîÅ –î–∏–∞–ª–æ–≥
        # DIALOG: [
        #     CallbackQueryHandler(confirm_deal, pattern=r"^confirm_deal_\d+$"),
        #     CallbackQueryHandler(cancel_deal, pattern=r"^cancel_deal_\d+$"),
        #     MessageHandler(filters.TEXT & filters.Regex("^(‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥)$"), end_chat),
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, dialog_handler) # ‚Üê –∑–¥–µ—Å—å —Å–∏–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω
        # ],

        # üîç –ü—Ä–æ—Ñ–∏–ª–∏
        SHOW_SELLER_PROFILE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, show_seller_profile),
            CallbackQueryHandler(toggle_sort, pattern="^toggle_sort$"),
            CallbackQueryHandler(buyer_platform, pattern="^back_to_roles$")
        ],
    },
    fallbacks=[
        CommandHandler('cancel', cancel),
        CommandHandler('end_chat', end_chat),
        CallbackQueryHandler(cancel, pattern='^cancel$'),
    ],
    per_message=False,  # ‚ùó —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    per_chat=False,
    per_user=True
)

    # application.add_handler(CallbackQueryHandler(start_dialog_from_profile, pattern="^start_dialog$"))
    # application.add_handler(CallbackQueryHandler(start, pattern="^back_to_start$"))

    application.add_handler(CallbackQueryHandler(seller_reply_start, pattern=r"^reply_to_\d+$"))

    application.add_handler(CommandHandler('help', help_command))

    application.add_handler(CommandHandler('clear_me', clear_my_application))

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('admin', admin_panel))
    application.add_handler(CommandHandler('profile', profile))
    application.add_handler(CallbackQueryHandler(cancel_reject, pattern='^cancel_reject_'))

    application.add_handler(CallbackQueryHandler(admin_action, pattern='^(approve|reject)'))
    
    application.run_polling()


if __name__ == '__main__':
    main()