import logging
import sqlite3
import os
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    ADMIN_IDS = [
            1345438940, # ID –ò–ª—å–∏
            792396771 # ID –ö–∏—Ä–∏–ª–ª–∞
        ]
    CHANNEL_ID = "-1002364019566"  # ID –∫–∞–Ω–∞–ª–∞
    DATABASE = "bot_db.sqlite" # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 
    TOKEN = "7423580380:AAEchqJy_1Kn4O20V2nAGE2pjzW4c-O5qhw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ---
(
    CHECK_SUBSCRIPTION, CHOOSE_ROLE,
    SELLER_PLATFORM, SELLER_AUDIENCE, SELLER_THEME, SELLER_VIEWS,
    SELLER_AD_TYPE, SELLER_SCREENSHOT, SELLER_CONFIRM,
    BUYER_PLATFORM, BUYER_CHOOSE_SELLER, BUYER_MESSAGE
) = range(12)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    # conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      first_name TEXT,
                      last_name TEXT,
                      role TEXT,
                      reg_date TIMESTAMP)''')
                      
    cursor.execute('''CREATE TABLE IF NOT EXISTS sellers
                     (seller_id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      platform TEXT,
                      audience TEXT,
                      theme TEXT,
                      views TEXT,
                      ad_type TEXT,
                      screenshot_id TEXT,
                      status TEXT DEFAULT 'pending',
                      FOREIGN KEY(user_id) REFERENCES users(user_id))''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS admin_logs
                     (log_id INTEGER PRIMARY KEY AUTOINCREMENT,
                      admin_id INTEGER,
                      action TEXT,
                      application_id INTEGER,
                      timestamp TIMESTAMP)''')

    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    # cursor.execute("CREATE INDEX IF NOT EXISTS idx_sellers_platform ON sellers(platform)")

    # cursor.execute("CREATE INDEX IF NOT EXISTS idx_sellers_status ON sellers(status)")

    conn.commit()
    conn.close() if 'conn' in locals() else None

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
role_keyboard = [
    [InlineKeyboardButton("–ü—Ä–æ–¥–∞–≤–µ—Ü", callback_data='seller')],
    [InlineKeyboardButton("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data='buyer')]
]

platform_keyboard = [
    [InlineKeyboardButton("TikTok", callback_data='tiktok')],
    [InlineKeyboardButton("YouTube", callback_data='youtube')],
    [InlineKeyboardButton("Instagram", callback_data='instagram')],
    [InlineKeyboardButton("VK", callback_data='vk')],
    [InlineKeyboardButton("Twitch", callback_data='twitch')]
]

ad_type_keyboard = [
    [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º—É–∑—ã–∫–∏", callback_data='music')],
    [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –¢–ì–ö", callback_data='tgk')],
    [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='products')],
    [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–æ–∫", callback_data='platforms')],
    [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤", callback_data='brands')]
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def save_user(user_id, username, first_name, last_name, role):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''INSERT OR IGNORE INTO users 
                      (user_id, username, first_name, last_name, role, reg_date)
                      VALUES (?, ?, ?, ?, ?, ?)''',
                   (user_id, username, first_name, last_name, role, datetime.now()))
    conn.commit()
    conn.close()

async def save_seller_application(user_id, data):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO sellers
                    (user_id, platform, audience, theme, views, ad_type, screenshot_id)
                    VALUES (?, ?, ?, ?, ?, ?, ?)''',
                   (user_id, data['platform'], data['audience'], 
                    data['theme'], data['views'], data['ad_type'], 
                    data['screenshot']))
    conn.commit()
    conn.close()

def log_admin_action(admin_id, action, app_id):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO admin_logs 
                      (admin_id, action, application_id, timestamp)
                      VALUES (?, ?, ?, ?)''',
                   (admin_id, action, app_id, datetime.now()))
    conn.commit()
    conn.close()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."""
    user = update.effective_user
    await save_user(user.id, user.username, user.first_name, user.last_name, 'unassigned')
    
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        f"https://t.me/+{CHANNEL_ID[1:]}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
        ])
    )
    return CHECK_SUBSCRIPTION

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."""
    query = update.callback_query
    await query.answer()
    
    try:
        user_id = query.from_user.id
        chat_member = await context.bot.get_chat_member(
            chat_id=Config.CHANNEL_ID, 
            user_id=user_id
        )
        subscribed = chat_member.status in ['member', 'administrator', 'creator']
        
        if subscribed:
            await query.edit_message_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å?",
                reply_markup=InlineKeyboardMarkup(KEYBOARDS['role']))
            return CHOOSE_ROLE
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            channel_link = f"https://t.me/c/{Config.CHANNEL_ID[4:]}"
            
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: {channel_link}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')],
                    [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_link)]
                ]),
                disable_web_page_preview=True
            )
            return CHECK_SUBSCRIPTION
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data='check_subscription')]
            ]))
        return ConversationHandler.END

async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (–ø—Ä–æ–¥–∞–≤–µ—Ü/–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    role = query.data
    await save_user(user_id, query.from_user.username, query.from_user.first_name, 
                   query.from_user.last_name, role)
    
    if role == 'seller':
        await query.edit_message_text(
            "–ù–∞ –∫–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º—É?",
            reply_markup=InlineKeyboardMarkup(platform_keyboard))
        return SELLER_PLATFORM
    else:
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
            reply_markup=InlineKeyboardMarkup(platform_keyboard))
        return BUYER_PLATFORM

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)
# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ seller_platform, seller_audience –∏ —Ç.–¥. –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞

async def seller_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–º."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'user_data' not in context.chat_data:
        context.chat_data['user_data'] = {}
    context.chat_data['user_data']['platform'] = query.data
    
    await query.edit_message_text("–ö–∞–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞? (—É–∫–∞–∂–∏—Ç–µ –≤ '–ö', –Ω–∞–ø—Ä–∏–º–µ—Ä: 1–ö, 5.6–ö)")
    return SELLER_AUDIENCE

async def seller_audience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º."""
    context.chat_data['user_data']['audience'] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    return SELLER_THEME

async def seller_theme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    context.chat_data['user_data']['theme'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∞—à–∏—Ö –≤–∏–¥–µ–æ/—Ä–∏–ª—Å–æ–≤ (–≤ '–ö', –Ω–∞–ø—Ä–∏–º–µ—Ä: 30–ö, 36–ö):")
    return SELLER_VIEWS

async def seller_views(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."""
    context.chat_data['user_data']['views'] = update.message.text
    await update.message.reply_text(
        "–ö–∞–∫—É—é —Ä–µ–∫–ª–∞–º—É –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?",
        reply_markup=InlineKeyboardMarkup(ad_type_keyboard))
    return SELLER_AD_TYPE

async def seller_ad_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–∫–ª–∞–º—ã."""
    query = update.callback_query
    await query.answer()
    context.chat_data['user_data']['ad_type'] = query.data
    await query.edit_message_text("–°–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π, —á—Ç–æ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞.")
    return SELLER_SCREENSHOT

async def seller_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞."""
    user = update.message.from_user
    data['screenshot'] = (update.message.photo[-1].file_id if update.message.photo else
                        (update.message.document.file_id if update.message.document else None))
    # data = {
    #     'platform': context.user_data['platform'],
    #     'audience': context.user_data['audience'],
    #     'theme': context.user_data['theme'],
    #     'views': context.user_data['views'],
    #     'ad_type': context.user_data['ad_type'],
    #     'screenshot': update.message.photo[-1].file_id if update.message.photo else None
    # }
    
    await save_seller_application(user.id, data)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    
    await update.message.reply_text(
        "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True))
    return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ---

async def buyer_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''SELECT user_id, platform, audience, views 
                      FROM sellers 
                      WHERE platform=? AND status='approved' ''',
                   (query.data,))
    sellers = cursor.fetchall()
    conn.close()
    
    if not sellers:
        await query.edit_message_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", callback_data='another_platform')]
            ]))
        return BUYER_PLATFORM
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
    seller_list = "\n".join(
        f"{idx+1}. @{seller[0]} | {seller[2]} | {seller[3]}"
        for idx, seller in enumerate(sellers)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.chat_data['sellers'] = sellers
    
    await query.edit_message_text(
        f"–ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–∞ {query.data}:\n\n{seller_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:")
    
    return BUYER_CHOOSE_SELLER

async def buyer_choose_seller(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."""
    try:
        seller_num = int(update.message.text) - 1
        sellers = context.chat_data['sellers']
        
        if 0 <= seller_num < len(sellers):
            selected_seller = sellers[seller_num]
            context.chat_data['selected_seller'] = selected_seller

            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: @{selected_seller[0]}\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞:")
            return BUYER_MESSAGE
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return BUYER_CHOOSE_SELLER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return BUYER_CHOOSE_SELLER
    except Exception as e:
        print(f"Error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
async def buyer_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞."""
    message = update.message.text
    user = update.message.from_user
    seller = context.chat_data['selected_seller']
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
    try:
        await context.bot.send_message(
            chat_id=seller[0],  # ID –ø—Ä–æ–¥–∞–≤—Ü–∞
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username}:\n\n{message}"
        )
        
        await update.message.reply_text(
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    return ConversationHandler.END

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM sellers WHERE status='pending'")
    applications = cursor.fetchall()
    
    if not applications:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        return
    
    for app in applications:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app[0]}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app[0]}")]
        ])
        
        await update.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ #{app[0]}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{app[1]}\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {app[3]}\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {app[4]}\n"
            f"–¢–µ–º–∞—Ç–∏–∫–∞: {app[5]}\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {app[6]}\n"
            f"–¢–∏–ø —Ä–µ–∫–ª–∞–º—ã: {app[7]}",
            reply_markup=keyboard
        )
    
    conn.close()

async def admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    action, app_id = query.data.split('_')
    app_id = int(app_id)
    
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    if action == 'approve':
        cursor.execute("UPDATE sellers SET status='approved' WHERE seller_id=?", (app_id,))
        cursor.execute("SELECT user_id FROM sellers WHERE seller_id=?", (app_id,))
        user_id = cursor.fetchone()[0]
        
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã."
        )
        
    elif action == 'reject':
        cursor.execute("UPDATE sellers SET status='rejected' WHERE seller_id=?", (app_id,))
        cursor.execute("SELECT user_id FROM sellers WHERE seller_id=?", (app_id,))
        user_id = cursor.fetchone()[0]
        
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
    
    log_admin_action(query.from_user.id, action, app_id)
    conn.commit()
    conn.close()
    await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True))
    return ConversationHandler.END

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHECK_SUBSCRIPTION: [
                CallbackQueryHandler(check_subscription, pattern='^check_subscription$')
            ],
            CHOOSE_ROLE: [
                CallbackQueryHandler(choose_role, pattern='^(seller|buyer)$')
            ],
            SELLER_PLATFORM: [
                CallbackQueryHandler(seller_platform, pattern='^(tiktok|youtube|instagram|vk|twitch)$')
            ],
            SELLER_AUDIENCE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, seller_audience)
            ],
            SELLER_THEME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, seller_theme)
            ],
            SELLER_VIEWS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, seller_views)
            ],
            SELLER_AD_TYPE: [
                CallbackQueryHandler(seller_ad_type, pattern='^(music|tgk|products|platforms|brands)$')
            ],
            SELLER_SCREENSHOT: [
                MessageHandler(filters.PHOTO | filters.Document.IMAGE | filters.TEXT, seller_screenshot)
            ],
            BUYER_PLATFORM: [
                CallbackQueryHandler(buyer_platform, pattern='^(tiktok|youtube|instagram|vk|twitch|another_platform)$')
            ],
            BUYER_CHOOSE_SELLER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, buyer_choose_seller)
            ],
            BUYER_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, buyer_message)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('admin', admin_panel))
    application.add_handler(CallbackQueryHandler(admin_action, pattern='^(approve|reject)_\d+$'))
    
    application.run_polling()

if __name__ == '__main__':
    main()